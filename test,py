#!/usr/bin/env python
import rospy
import tf2_ros
import geometry_msgs.msg
import nav_msgs.msg
import sensor_msgs.msg
import tf
import math

class OdomToBaseFootprintPublisher:
    def __init__(self):
        rospy.init_node('odom_to_base_footprint_broadcaster')

        # 初始化数据
        self.x = 0.0
        self.y = 0.0
        self.yaw = 0.0  # 从IMU获取

        self.br = tf2_ros.TransformBroadcaster()

        # 订阅轮式里程计
        rospy.Subscriber('/odom', nav_msgs.msg.Odometry, self.odom_callback)
        # 订阅IMU
        rospy.Subscriber('/imu', sensor_msgs.msg.Imu, self.imu_callback)

        self.rate = rospy.Rate(50)
        self.run()

    def odom_callback(self, msg):
        self.x = msg.pose.pose.position.x
        self.y = msg.pose.pose.position.y

    def imu_callback(self, msg):
        # 从IMU获取 yaw (偏航角)
        orientation_q = msg.orientation
        quaternion = (
            orientation_q.x,
            orientation_q.y,
            orientation_q.z,
            orientation_q.w
        )
        _, _, self.yaw = tf.transformations.euler_from_quaternion(quaternion)

    def run(self):
        while not rospy.is_shutdown():
            t = geometry_msgs.msg.TransformStamped()
            t.header.stamp = rospy.Time.now()
            t.header.frame_id = "odom"
            t.child_frame_id = "base_footprint"

            t.transform.translation.x = self.x
            t.transform.translation.y = self.y
            t.transform.translation.z = 0.0

            # 将yaw转为四元数
            q = tf.transformations.quaternion_from_euler(0, 0, self.yaw)
            t.transform.rotation.x = q[0]
            t.transform.rotation.y = q[1]
            t.transform.rotation.z = q[2]
            t.transform.rotation.w = q[3]

            self.br.sendTransform(t)
            self.rate.sleep()

if __name__ == '__main__':
    try:
        OdomToBaseFootprintPublisher()
    except rospy.ROSInterruptException:
        pass
